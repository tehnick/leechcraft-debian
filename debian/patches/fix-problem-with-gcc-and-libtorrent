Description: GCC in Debian generates move ctors for structs with bitfields
 GCC in Debian and Ubuntu fails to build program with libtorrent when
 "-std=c++0x" option is enabled. There is no such problem in Gentoo, Arch Linux
 and openSUSE with the same verisons of GCC and libtorrent.
Author: Georg Rudoy
Last-Update: 2012-01-14

--- a/src/plugins/bittorrent/CMakeLists.txt
+++ b/src/plugins/bittorrent/CMakeLists.txt
@@ -69,6 +69,7 @@ SET (SRCS
 	speedselectoraction.cpp
 	torrentmaker.cpp
 	singletrackerchanger.cpp
+	c11kludges.cpp
 	)
 SET (HEADERS
 	torrentplugin.h
@@ -104,6 +105,7 @@ SET (HEADERS
 	speedselectoraction.h
 	torrentmaker.h
 	singletrackerchanger.h
+	c11kludges.h
 	newtorrentparams.h
 	torrentinfo.h
 	fileinfo.h
@@ -140,6 +142,10 @@ IF (WIN32)
 	ADD_DEFINITIONS (-DTORRENT_DISABLE_GEO_IP)
 ENDIF (WIN32)
 
+IF (GCC_GENERATES_MOVE_CTORS_FOR_STRUCTS_WITH_BITFIELDS)
+	SET_SOURCE_FILES_PROPERTIES (c11kludges.cpp PROPERTIES COMPILE_FLAGS "-std=c++98")
+ENDIF (GCC_GENERATES_MOVE_CTORS_FOR_STRUCTS_WITH_BITFIELDS)
+
 IF (UNIX)
 	FIND_PROGRAM (LPKGC_CMD pkg-config)
 	EXECUTE_PROCESS (COMMAND "${LPKGC_CMD}" libtorrent-rasterbar --cflags
--- /dev/null
+++ b/src/plugins/bittorrent/c11kludges.cpp
@@ -0,0 +1,54 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2006-2012  Georg Rudoy
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ **********************************************************************/
+
+#include "c11kludges.h"
+
+namespace LeechCraft
+{
+namespace Plugins
+{
+namespace BitTorrent
+{
+	namespace
+	{
+		bool Less (const libtorrent::announce_entry& l, const libtorrent::announce_entry& r)
+		{
+			return l.url < r.url;
+		}
+
+		bool Cmp (const libtorrent::announce_entry& l, const libtorrent::announce_entry& r)
+		{
+			return l.url == r.url;
+		}
+	}
+
+	std::vector<libtorrent::announce_entry> GetTrackers (const QList<std::vector<libtorrent::announce_entry> >& list)
+	{
+		std::vector<libtorrent::announce_entry> allTrackers;
+		Q_FOREACH (const std::vector<libtorrent::announce_entry>& v, list)
+			std::copy (v.begin (), v.end (), std::back_inserter (allTrackers));
+
+		std::stable_sort (allTrackers.begin (), allTrackers.end (), Less);
+		std::vector<libtorrent::announce_entry>::iterator newLast =
+				std::unique (allTrackers.begin (), allTrackers.end (), Cmp);
+		allTrackers.erase (newLast, allTrackers.end ());
+		return allTrackers;
+	}
+}
+}
+}
--- /dev/null
+++ b/src/plugins/bittorrent/c11kludges.h
@@ -0,0 +1,35 @@
+/**********************************************************************
+ * LeechCraft - modular cross-platform feature rich internet client.
+ * Copyright (C) 2006-2012  Georg Rudoy
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ **********************************************************************/
+
+#ifndef PLUGINS_BITTORRENT_C11KLUDGES_H
+#define PLUGINS_BITTORRENT_C11KLUDGES_H
+#include <QModelIndex>
+#include <torrent_info.hpp>
+
+namespace LeechCraft
+{
+namespace Plugins
+{
+namespace BitTorrent
+{
+	std::vector<libtorrent::announce_entry> GetTrackers (const QList<std::vector<libtorrent::announce_entry> >&);
+}
+}
+}
+
+#endif
diff --git a/src/plugins/bittorrent/core.cpp b/src/plugins/bittorrent/core.cpp
index e7e2f39..f19896a 100644
--- a/src/plugins/bittorrent/core.cpp
+++ b/src/plugins/bittorrent/core.cpp
@@ -1164,6 +1164,11 @@ namespace LeechCraft
 				ResetFiles ();
 			}
 
+			std::vector<libtorrent::announce_entry> Core::GetTrackers (const QModelIndex& index) const
+			{
+				return GetTrackers (Proxy_->MapToSource (index).row ());
+			}
+
 			std::vector<libtorrent::announce_entry> Core::GetTrackers (const boost::optional<int>& row) const
 			{
 				int tor = row ? *row : CurrentTorrent_;
diff --git a/src/plugins/bittorrent/core.h b/src/plugins/bittorrent/core.h
index d87f193..8a98c6d 100644
--- a/src/plugins/bittorrent/core.h
+++ b/src/plugins/bittorrent/core.h
@@ -265,6 +265,7 @@ namespace LeechCraft
 				void RemoveWebSeed (const QString&, bool);
 				void SetFilePriority (int, int);
 				void SetFilename (int, const QString&);
+				std::vector<libtorrent::announce_entry> GetTrackers (const QModelIndex&) const;
 				std::vector<libtorrent::announce_entry> GetTrackers (const boost::optional<int>& = boost::optional<int> ()) const;
 				void SetTrackers (const std::vector<libtorrent::announce_entry>&,
 						const boost::optional<int>& = boost::optional<int> ());
diff --git a/src/plugins/bittorrent/torrentplugin.cpp b/src/plugins/bittorrent/torrentplugin.cpp
index c1751b7..e2efa34 100644
--- a/src/plugins/bittorrent/torrentplugin.cpp
+++ b/src/plugins/bittorrent/torrentplugin.cpp
@@ -50,6 +50,7 @@
 #include "fastspeedcontrolwidget.h"
 #include "ipfilterdialog.h"
 #include "speedselectoraction.h"
+#include "c11kludges.h"
 
 #ifdef AddJob
 #undef AddJob
@@ -759,29 +760,16 @@ namespace LeechCraft
 					return;
 				}
 
-				std::vector<libtorrent::announce_entry> allTrackers;
-				Q_FOREACH (QModelIndex si, sis)
-				{
-					auto those = Core::Instance ()->GetTrackers (Core::Instance ()->
-							GetProxy ()->MapToSource (si).row ());
-					std::copy (those.begin (), those.end (),
-							std::back_inserter (allTrackers));
-				}
-
-				if (!allTrackers.size ())
-					allTrackers = Core::Instance ()->
-							GetTrackers (Core::Instance ()->
-									GetCurrentTorrent ());
-
-				std::stable_sort (allTrackers.begin (), allTrackers.end (),
-						[] (const libtorrent::announce_entry& l, const libtorrent::announce_entry& r)
-							{ return l.url < r.url; });
-
-				auto newLast = std::unique (allTrackers.begin (), allTrackers.end (),
-						[] (const libtorrent::announce_entry& l, const libtorrent::announce_entry& r)
-							{ return l.url == r.url; });
+				QList<std::vector<libtorrent::announce_entry>> entries;
+				if (!sis.isEmpty ())
+					Q_FOREACH (const QModelIndex& si, sis)
+						entries << Core::Instance ()->GetTrackers (Core::Instance ()->
+									GetProxy ()->MapToSource (si).row ());
+				else
+					entries << Core::Instance ()->
+							GetTrackers (Core::Instance ()->GetCurrentTorrent ());
 
-				allTrackers.erase (newLast, allTrackers.end ());
+				const auto& allTrackers = GetTrackers (entries);
 
 				if (!allTrackers.size ())
 					return;
